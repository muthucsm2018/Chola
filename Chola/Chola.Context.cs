//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Chola
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Acc_SalesPayments> Acc_SalesPayments { get; set; }
        public virtual DbSet<Acc_Vendors> Acc_Vendors { get; set; }
        public virtual DbSet<CustomerAccount> CustomerAccount { get; set; }
        public virtual DbSet<CustomerAccount_Payment> CustomerAccount_Payment { get; set; }
        public virtual DbSet<Document> Document { get; set; }
        public virtual DbSet<Miscellaneous> Miscellaneous { get; set; }
        public virtual DbSet<OthersType> OthersType { get; set; }
        public virtual DbSet<security_Pages> security_Pages { get; set; }
        public virtual DbSet<security_RolePages> security_RolePages { get; set; }
        public virtual DbSet<security_Roles> security_Roles { get; set; }
        public virtual DbSet<security_UsersInRoles> security_UsersInRoles { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<Tours> Tours { get; set; }
        public virtual DbSet<Transactions> Transactions { get; set; }
        public virtual DbSet<webpages_OAuthMembership> webpages_OAuthMembership { get; set; }
        public virtual DbSet<webpages_Roles> webpages_Roles { get; set; }
        public virtual DbSet<Expense> Expense { get; set; }
        public virtual DbSet<webpages_Membership> webpages_Membership { get; set; }
        public virtual DbSet<ETicket_Passengers> ETicket_Passengers { get; set; }
        public virtual DbSet<ETickets> ETickets { get; set; }
        public virtual DbSet<Flights> Flights { get; set; }
        public virtual DbSet<Airports> Airports { get; set; }
        public virtual DbSet<Baggages> Baggages { get; set; }
        public virtual DbSet<ETicket_Itinery> ETicket_Itinery { get; set; }
        public virtual DbSet<PaySlip> PaySlips { get; set; }
        public virtual DbSet<Ticket_Customers> Ticket_Customers { get; set; }
        public virtual DbSet<Ticket> Tickets { get; set; }
    
        public virtual int sp_frm_add_upd_Acc_Bill_ActualCost(Nullable<int> ticketCode, Nullable<decimal> charge, Nullable<int> userId, string pageName)
        {
            var ticketCodeParameter = ticketCode.HasValue ?
                new ObjectParameter("TicketCode", ticketCode) :
                new ObjectParameter("TicketCode", typeof(int));
    
            var chargeParameter = charge.HasValue ?
                new ObjectParameter("Charge", charge) :
                new ObjectParameter("Charge", typeof(decimal));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_frm_add_upd_Acc_Bill_ActualCost", ticketCodeParameter, chargeParameter, userIdParameter, pageNameParameter);
        }
    
        public virtual int sp_frm_add_upd_Acc_Vendors(Nullable<int> vendorCode, string vendorName, string address1, string address2, string address3, string taxID, Nullable<bool> status, Nullable<int> userId, string pageName)
        {
            var vendorCodeParameter = vendorCode.HasValue ?
                new ObjectParameter("VendorCode", vendorCode) :
                new ObjectParameter("VendorCode", typeof(int));
    
            var vendorNameParameter = vendorName != null ?
                new ObjectParameter("VendorName", vendorName) :
                new ObjectParameter("VendorName", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var address3Parameter = address3 != null ?
                new ObjectParameter("Address3", address3) :
                new ObjectParameter("Address3", typeof(string));
    
            var taxIDParameter = taxID != null ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_frm_add_upd_Acc_Vendors", vendorCodeParameter, vendorNameParameter, address1Parameter, address2Parameter, address3Parameter, taxIDParameter, statusParameter, userIdParameter, pageNameParameter);
        }
    
        public virtual int sp_frm_add_upd_AccSalesPayment(Nullable<int> vendorCode, Nullable<System.DateTime> paymentDate, string paymentBy, Nullable<double> paymentAmount)
        {
            var vendorCodeParameter = vendorCode.HasValue ?
                new ObjectParameter("VendorCode", vendorCode) :
                new ObjectParameter("VendorCode", typeof(int));
    
            var paymentDateParameter = paymentDate.HasValue ?
                new ObjectParameter("PaymentDate", paymentDate) :
                new ObjectParameter("PaymentDate", typeof(System.DateTime));
    
            var paymentByParameter = paymentBy != null ?
                new ObjectParameter("PaymentBy", paymentBy) :
                new ObjectParameter("PaymentBy", typeof(string));
    
            var paymentAmountParameter = paymentAmount.HasValue ?
                new ObjectParameter("PaymentAmount", paymentAmount) :
                new ObjectParameter("PaymentAmount", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_frm_add_upd_AccSalesPayment", vendorCodeParameter, paymentDateParameter, paymentByParameter, paymentAmountParameter);
        }
    
        public virtual int sp_frm_add_upd_CustomerPayment(Nullable<int> paymentID, string refNo, Nullable<decimal> amount, Nullable<System.DateTime> trxnDate, string paymentBy)
        {
            var paymentIDParameter = paymentID.HasValue ?
                new ObjectParameter("PaymentID", paymentID) :
                new ObjectParameter("PaymentID", typeof(int));
    
            var refNoParameter = refNo != null ?
                new ObjectParameter("RefNo", refNo) :
                new ObjectParameter("RefNo", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var trxnDateParameter = trxnDate.HasValue ?
                new ObjectParameter("TrxnDate", trxnDate) :
                new ObjectParameter("TrxnDate", typeof(System.DateTime));
    
            var paymentByParameter = paymentBy != null ?
                new ObjectParameter("PaymentBy", paymentBy) :
                new ObjectParameter("PaymentBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_frm_add_upd_CustomerPayment", paymentIDParameter, refNoParameter, amountParameter, trxnDateParameter, paymentByParameter);
        }
    
        public virtual int sp_frm_add_upd_Customers(string refNo, string customerName, Nullable<decimal> openingBalance, Nullable<int> userId, string pageName)
        {
            var refNoParameter = refNo != null ?
                new ObjectParameter("RefNo", refNo) :
                new ObjectParameter("RefNo", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var openingBalanceParameter = openingBalance.HasValue ?
                new ObjectParameter("OpeningBalance", openingBalance) :
                new ObjectParameter("OpeningBalance", typeof(decimal));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_frm_add_upd_Customers", refNoParameter, customerNameParameter, openingBalanceParameter, userIdParameter, pageNameParameter);
        }
    
        public virtual int sp_frm_add_upd_Document(Nullable<int> documentType, string documentName, string nationality, string visaType, string duration, Nullable<decimal> visaCost, Nullable<decimal> charge, Nullable<int> processingDays, Nullable<int> sortOrder, Nullable<int> userId, string pageName)
        {
            var documentTypeParameter = documentType.HasValue ?
                new ObjectParameter("DocumentType", documentType) :
                new ObjectParameter("DocumentType", typeof(int));
    
            var documentNameParameter = documentName != null ?
                new ObjectParameter("DocumentName", documentName) :
                new ObjectParameter("DocumentName", typeof(string));
    
            var nationalityParameter = nationality != null ?
                new ObjectParameter("Nationality", nationality) :
                new ObjectParameter("Nationality", typeof(string));
    
            var visaTypeParameter = visaType != null ?
                new ObjectParameter("VisaType", visaType) :
                new ObjectParameter("VisaType", typeof(string));
    
            var durationParameter = duration != null ?
                new ObjectParameter("Duration", duration) :
                new ObjectParameter("Duration", typeof(string));
    
            var visaCostParameter = visaCost.HasValue ?
                new ObjectParameter("VisaCost", visaCost) :
                new ObjectParameter("VisaCost", typeof(decimal));
    
            var chargeParameter = charge.HasValue ?
                new ObjectParameter("Charge", charge) :
                new ObjectParameter("Charge", typeof(decimal));
    
            var processingDaysParameter = processingDays.HasValue ?
                new ObjectParameter("ProcessingDays", processingDays) :
                new ObjectParameter("ProcessingDays", typeof(int));
    
            var sortOrderParameter = sortOrder.HasValue ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_frm_add_upd_Document", documentTypeParameter, documentNameParameter, nationalityParameter, visaTypeParameter, durationParameter, visaCostParameter, chargeParameter, processingDaysParameter, sortOrderParameter, userIdParameter, pageNameParameter);
        }
    
        public virtual int sp_frm_add_upd_Expense(Nullable<int> expenseCode, string expenseName, Nullable<decimal> charge, string remarks, Nullable<int> userId, string pageName)
        {
            var expenseCodeParameter = expenseCode.HasValue ?
                new ObjectParameter("ExpenseCode", expenseCode) :
                new ObjectParameter("ExpenseCode", typeof(int));
    
            var expenseNameParameter = expenseName != null ?
                new ObjectParameter("ExpenseName", expenseName) :
                new ObjectParameter("ExpenseName", typeof(string));
    
            var chargeParameter = charge.HasValue ?
                new ObjectParameter("Charge", charge) :
                new ObjectParameter("Charge", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_frm_add_upd_Expense", expenseCodeParameter, expenseNameParameter, chargeParameter, remarksParameter, userIdParameter, pageNameParameter);
        }
    
        public virtual int sp_frm_add_upd_Miscellaneous(Nullable<int> othersCode, Nullable<int> othersTypeCode, Nullable<decimal> charge, string remarks, Nullable<int> userId, string pageName)
        {
            var othersCodeParameter = othersCode.HasValue ?
                new ObjectParameter("OthersCode", othersCode) :
                new ObjectParameter("OthersCode", typeof(int));
    
            var othersTypeCodeParameter = othersTypeCode.HasValue ?
                new ObjectParameter("OthersTypeCode", othersTypeCode) :
                new ObjectParameter("OthersTypeCode", typeof(int));
    
            var chargeParameter = charge.HasValue ?
                new ObjectParameter("Charge", charge) :
                new ObjectParameter("Charge", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_frm_add_upd_Miscellaneous", othersCodeParameter, othersTypeCodeParameter, chargeParameter, remarksParameter, userIdParameter, pageNameParameter);
        }
    
        public virtual int sp_frm_add_upd_OthersType(Nullable<int> othersTypeCode, string otherTypeName, Nullable<int> userId, string pageName)
        {
            var othersTypeCodeParameter = othersTypeCode.HasValue ?
                new ObjectParameter("OthersTypeCode", othersTypeCode) :
                new ObjectParameter("OthersTypeCode", typeof(int));
    
            var otherTypeNameParameter = otherTypeName != null ?
                new ObjectParameter("OtherTypeName", otherTypeName) :
                new ObjectParameter("OtherTypeName", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_frm_add_upd_OthersType", othersTypeCodeParameter, otherTypeNameParameter, userIdParameter, pageNameParameter);
        }
    
        public virtual int sp_frm_add_upd_Tours(Nullable<int> tourCode, string customerName, string remarks, Nullable<System.DateTime> trxnDate, Nullable<decimal> buyingPrice, Nullable<decimal> sellingPrice, Nullable<int> userId, string pageName)
        {
            var tourCodeParameter = tourCode.HasValue ?
                new ObjectParameter("TourCode", tourCode) :
                new ObjectParameter("TourCode", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var trxnDateParameter = trxnDate.HasValue ?
                new ObjectParameter("TrxnDate", trxnDate) :
                new ObjectParameter("TrxnDate", typeof(System.DateTime));
    
            var buyingPriceParameter = buyingPrice.HasValue ?
                new ObjectParameter("BuyingPrice", buyingPrice) :
                new ObjectParameter("BuyingPrice", typeof(decimal));
    
            var sellingPriceParameter = sellingPrice.HasValue ?
                new ObjectParameter("SellingPrice", sellingPrice) :
                new ObjectParameter("SellingPrice", typeof(decimal));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_frm_add_upd_Tours", tourCodeParameter, customerNameParameter, remarksParameter, trxnDateParameter, buyingPriceParameter, sellingPriceParameter, userIdParameter, pageNameParameter);
        }
    
        public virtual int sp_frm_add_upd_Transactions(Nullable<int> transactionID, string passportNumber, Nullable<int> documentType, string barcodeNumber, string invoiceNumber, string customerName, string contactNo, string nationality, Nullable<int> statusCode, Nullable<System.DateTime> transactionDate, Nullable<System.DateTime> deliveryDate, string remarks, Nullable<decimal> payableAmount, Nullable<decimal> paidAmount, Nullable<decimal> balanceAmount, Nullable<int> userId, string pageName)
        {
            var transactionIDParameter = transactionID.HasValue ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(int));
    
            var passportNumberParameter = passportNumber != null ?
                new ObjectParameter("PassportNumber", passportNumber) :
                new ObjectParameter("PassportNumber", typeof(string));
    
            var documentTypeParameter = documentType.HasValue ?
                new ObjectParameter("DocumentType", documentType) :
                new ObjectParameter("DocumentType", typeof(int));
    
            var barcodeNumberParameter = barcodeNumber != null ?
                new ObjectParameter("BarcodeNumber", barcodeNumber) :
                new ObjectParameter("BarcodeNumber", typeof(string));
    
            var invoiceNumberParameter = invoiceNumber != null ?
                new ObjectParameter("InvoiceNumber", invoiceNumber) :
                new ObjectParameter("InvoiceNumber", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var nationalityParameter = nationality != null ?
                new ObjectParameter("Nationality", nationality) :
                new ObjectParameter("Nationality", typeof(string));
    
            var statusCodeParameter = statusCode.HasValue ?
                new ObjectParameter("StatusCode", statusCode) :
                new ObjectParameter("StatusCode", typeof(int));
    
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            var deliveryDateParameter = deliveryDate.HasValue ?
                new ObjectParameter("DeliveryDate", deliveryDate) :
                new ObjectParameter("DeliveryDate", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var payableAmountParameter = payableAmount.HasValue ?
                new ObjectParameter("PayableAmount", payableAmount) :
                new ObjectParameter("PayableAmount", typeof(decimal));
    
            var paidAmountParameter = paidAmount.HasValue ?
                new ObjectParameter("PaidAmount", paidAmount) :
                new ObjectParameter("PaidAmount", typeof(decimal));
    
            var balanceAmountParameter = balanceAmount.HasValue ?
                new ObjectParameter("BalanceAmount", balanceAmount) :
                new ObjectParameter("BalanceAmount", typeof(decimal));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_frm_add_upd_Transactions", transactionIDParameter, passportNumberParameter, documentTypeParameter, barcodeNumberParameter, invoiceNumberParameter, customerNameParameter, contactNoParameter, nationalityParameter, statusCodeParameter, transactionDateParameter, deliveryDateParameter, remarksParameter, payableAmountParameter, paidAmountParameter, balanceAmountParameter, userIdParameter, pageNameParameter);
        }
    
        public virtual ObjectResult<sp_frm_get_Acc_Vendors_Result> sp_frm_get_Acc_Vendors(string vendorName, Nullable<int> userId, string pageName)
        {
            var vendorNameParameter = vendorName != null ?
                new ObjectParameter("VendorName", vendorName) :
                new ObjectParameter("VendorName", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_frm_get_Acc_Vendors_Result>("sp_frm_get_Acc_Vendors", vendorNameParameter, userIdParameter, pageNameParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> sp_frm_get_AccSales_Customers(string refNo)
        {
            var refNoParameter = refNo != null ?
                new ObjectParameter("RefNo", refNo) :
                new ObjectParameter("RefNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sp_frm_get_AccSales_Customers", refNoParameter);
        }
    
        public virtual ObjectResult<sp_frm_get_AccSales_Payments_Result> sp_frm_get_AccSales_Payments(Nullable<int> vendorCode)
        {
            var vendorCodeParameter = vendorCode.HasValue ?
                new ObjectParameter("VendorCode", vendorCode) :
                new ObjectParameter("VendorCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_frm_get_AccSales_Payments_Result>("sp_frm_get_AccSales_Payments", vendorCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> sp_frm_get_AccSales_Users(Nullable<int> vendorCode)
        {
            var vendorCodeParameter = vendorCode.HasValue ?
                new ObjectParameter("VendorCode", vendorCode) :
                new ObjectParameter("VendorCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sp_frm_get_AccSales_Users", vendorCodeParameter);
        }
    
        public virtual ObjectResult<sp_frm_get_Customer_Payments_Result> sp_frm_get_Customer_Payments(string refNo)
        {
            var refNoParameter = refNo != null ?
                new ObjectParameter("RefNo", refNo) :
                new ObjectParameter("RefNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_frm_get_Customer_Payments_Result>("sp_frm_get_Customer_Payments", refNoParameter);
        }
    
        public virtual ObjectResult<sp_frm_get_Customer_Report_Result> sp_frm_get_Customer_Report(string refNo, Nullable<int> userId, string pageName, Nullable<System.DateTime> transactionFrom, Nullable<System.DateTime> transactionTo, string paymentBy)
        {
            var refNoParameter = refNo != null ?
                new ObjectParameter("RefNo", refNo) :
                new ObjectParameter("RefNo", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            var transactionFromParameter = transactionFrom.HasValue ?
                new ObjectParameter("TransactionFrom", transactionFrom) :
                new ObjectParameter("TransactionFrom", typeof(System.DateTime));
    
            var transactionToParameter = transactionTo.HasValue ?
                new ObjectParameter("TransactionTo", transactionTo) :
                new ObjectParameter("TransactionTo", typeof(System.DateTime));
    
            var paymentByParameter = paymentBy != null ?
                new ObjectParameter("PaymentBy", paymentBy) :
                new ObjectParameter("PaymentBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_frm_get_Customer_Report_Result>("sp_frm_get_Customer_Report", refNoParameter, userIdParameter, pageNameParameter, transactionFromParameter, transactionToParameter, paymentByParameter);
        }
    
        public virtual ObjectResult<sp_frm_get_Customers_Result> sp_frm_get_Customers(string customerName, Nullable<int> userId, string pageName)
        {
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_frm_get_Customers_Result>("sp_frm_get_Customers", customerNameParameter, userIdParameter, pageNameParameter);
        }
    
        public virtual ObjectResult<sp_frm_get_Documents_Result> sp_frm_get_Documents(string documentName, string nationality, Nullable<int> userId, string pageName)
        {
            var documentNameParameter = documentName != null ?
                new ObjectParameter("DocumentName", documentName) :
                new ObjectParameter("DocumentName", typeof(string));
    
            var nationalityParameter = nationality != null ?
                new ObjectParameter("Nationality", nationality) :
                new ObjectParameter("Nationality", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_frm_get_Documents_Result>("sp_frm_get_Documents", documentNameParameter, nationalityParameter, userIdParameter, pageNameParameter);
        }
    
        public virtual ObjectResult<sp_frm_get_Expense_Result> sp_frm_get_Expense(Nullable<int> expenseCode, string expenseName, Nullable<int> userId, string pageName, Nullable<int> parmType, Nullable<System.DateTime> transactionFrom, Nullable<System.DateTime> transactionTo)
        {
            var expenseCodeParameter = expenseCode.HasValue ?
                new ObjectParameter("ExpenseCode", expenseCode) :
                new ObjectParameter("ExpenseCode", typeof(int));
    
            var expenseNameParameter = expenseName != null ?
                new ObjectParameter("ExpenseName", expenseName) :
                new ObjectParameter("ExpenseName", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            var parmTypeParameter = parmType.HasValue ?
                new ObjectParameter("ParmType", parmType) :
                new ObjectParameter("ParmType", typeof(int));
    
            var transactionFromParameter = transactionFrom.HasValue ?
                new ObjectParameter("TransactionFrom", transactionFrom) :
                new ObjectParameter("TransactionFrom", typeof(System.DateTime));
    
            var transactionToParameter = transactionTo.HasValue ?
                new ObjectParameter("TransactionTo", transactionTo) :
                new ObjectParameter("TransactionTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_frm_get_Expense_Result>("sp_frm_get_Expense", expenseCodeParameter, expenseNameParameter, userIdParameter, pageNameParameter, parmTypeParameter, transactionFromParameter, transactionToParameter);
        }
    
        public virtual ObjectResult<sp_frm_get_Miscellaneous_Result> sp_frm_get_Miscellaneous(Nullable<int> othersCode, Nullable<int> othersTypeCode, Nullable<int> userId, string pageName, Nullable<int> parmType, Nullable<System.DateTime> transactionFrom, Nullable<System.DateTime> transactionTo)
        {
            var othersCodeParameter = othersCode.HasValue ?
                new ObjectParameter("OthersCode", othersCode) :
                new ObjectParameter("OthersCode", typeof(int));
    
            var othersTypeCodeParameter = othersTypeCode.HasValue ?
                new ObjectParameter("OthersTypeCode", othersTypeCode) :
                new ObjectParameter("OthersTypeCode", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            var parmTypeParameter = parmType.HasValue ?
                new ObjectParameter("ParmType", parmType) :
                new ObjectParameter("ParmType", typeof(int));
    
            var transactionFromParameter = transactionFrom.HasValue ?
                new ObjectParameter("TransactionFrom", transactionFrom) :
                new ObjectParameter("TransactionFrom", typeof(System.DateTime));
    
            var transactionToParameter = transactionTo.HasValue ?
                new ObjectParameter("TransactionTo", transactionTo) :
                new ObjectParameter("TransactionTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_frm_get_Miscellaneous_Result>("sp_frm_get_Miscellaneous", othersCodeParameter, othersTypeCodeParameter, userIdParameter, pageNameParameter, parmTypeParameter, transactionFromParameter, transactionToParameter);
        }
    
        public virtual ObjectResult<sp_frm_get_OtherTypes_Result> sp_frm_get_OtherTypes(string othersTypeName, Nullable<int> userId, string pageName)
        {
            var othersTypeNameParameter = othersTypeName != null ?
                new ObjectParameter("OthersTypeName", othersTypeName) :
                new ObjectParameter("OthersTypeName", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_frm_get_OtherTypes_Result>("sp_frm_get_OtherTypes", othersTypeNameParameter, userIdParameter, pageNameParameter);
        }
    
        public virtual ObjectResult<sp_frm_get_parm_Acc_Vendors_Result> sp_frm_get_parm_Acc_Vendors(Nullable<int> userId, string pageName, Nullable<int> companyID)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_frm_get_parm_Acc_Vendors_Result>("sp_frm_get_parm_Acc_Vendors", userIdParameter, pageNameParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<sp_frm_get_parm_Customers_Result> sp_frm_get_parm_Customers(Nullable<int> userId, string pageName)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_frm_get_parm_Customers_Result>("sp_frm_get_parm_Customers", userIdParameter, pageNameParameter);
        }
    
        public virtual ObjectResult<sp_frm_get_Parm_DocumentTypes_Result> sp_frm_get_Parm_DocumentTypes(Nullable<int> userId, string pageName)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_frm_get_Parm_DocumentTypes_Result>("sp_frm_get_Parm_DocumentTypes", userIdParameter, pageNameParameter);
        }
    
        public virtual ObjectResult<sp_frm_get_Parm_OtherTypes_Result> sp_frm_get_Parm_OtherTypes(Nullable<int> userId, string pageName)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_frm_get_Parm_OtherTypes_Result>("sp_frm_get_Parm_OtherTypes", userIdParameter, pageNameParameter);
        }
    
        public virtual ObjectResult<sp_frm_get_Parm_Status_Result> sp_frm_get_Parm_Status(Nullable<int> userId, string pageName)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_frm_get_Parm_Status_Result>("sp_frm_get_Parm_Status", userIdParameter, pageNameParameter);
        }
    
        public virtual ObjectResult<sp_frm_get_Parm_Users_Result> sp_frm_get_Parm_Users(Nullable<int> userId, string pageName)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_frm_get_Parm_Users_Result>("sp_frm_get_Parm_Users", userIdParameter, pageNameParameter);
        }
    
        public virtual ObjectResult<sp_frm_get_Tickets_Report_Result> sp_frm_get_Tickets_Report(Nullable<int> ticketCode, string vendorName, Nullable<int> userId, string pageName, Nullable<System.DateTime> transactionFrom, Nullable<System.DateTime> transactionTo)
        {
            var ticketCodeParameter = ticketCode.HasValue ?
                new ObjectParameter("TicketCode", ticketCode) :
                new ObjectParameter("TicketCode", typeof(int));
    
            var vendorNameParameter = vendorName != null ?
                new ObjectParameter("VendorName", vendorName) :
                new ObjectParameter("VendorName", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            var transactionFromParameter = transactionFrom.HasValue ?
                new ObjectParameter("TransactionFrom", transactionFrom) :
                new ObjectParameter("TransactionFrom", typeof(System.DateTime));
    
            var transactionToParameter = transactionTo.HasValue ?
                new ObjectParameter("TransactionTo", transactionTo) :
                new ObjectParameter("TransactionTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_frm_get_Tickets_Report_Result>("sp_frm_get_Tickets_Report", ticketCodeParameter, vendorNameParameter, userIdParameter, pageNameParameter, transactionFromParameter, transactionToParameter);
        }
    
        public virtual ObjectResult<sp_frm_get_Tours_Result> sp_frm_get_Tours(Nullable<int> tourCode, string customerName, Nullable<int> userId, string pageName, Nullable<System.DateTime> transactionFrom, Nullable<System.DateTime> transactionTo)
        {
            var tourCodeParameter = tourCode.HasValue ?
                new ObjectParameter("TourCode", tourCode) :
                new ObjectParameter("TourCode", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            var transactionFromParameter = transactionFrom.HasValue ?
                new ObjectParameter("TransactionFrom", transactionFrom) :
                new ObjectParameter("TransactionFrom", typeof(System.DateTime));
    
            var transactionToParameter = transactionTo.HasValue ?
                new ObjectParameter("TransactionTo", transactionTo) :
                new ObjectParameter("TransactionTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_frm_get_Tours_Result>("sp_frm_get_Tours", tourCodeParameter, customerNameParameter, userIdParameter, pageNameParameter, transactionFromParameter, transactionToParameter);
        }
    
        public virtual ObjectResult<sp_frm_get_Transaction_Details_Result> sp_frm_get_Transaction_Details(Nullable<int> customerId)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_frm_get_Transaction_Details_Result>("sp_frm_get_Transaction_Details", customerIdParameter);
        }
    
        public virtual ObjectResult<sp_frm_get_Transaction_Details_OverAll_Result> sp_frm_get_Transaction_Details_OverAll(Nullable<int> customerId, Nullable<System.DateTime> transactionFrom, Nullable<System.DateTime> transactionTo)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var transactionFromParameter = transactionFrom.HasValue ?
                new ObjectParameter("TransactionFrom", transactionFrom) :
                new ObjectParameter("TransactionFrom", typeof(System.DateTime));
    
            var transactionToParameter = transactionTo.HasValue ?
                new ObjectParameter("TransactionTo", transactionTo) :
                new ObjectParameter("TransactionTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_frm_get_Transaction_Details_OverAll_Result>("sp_frm_get_Transaction_Details_OverAll", customerIdParameter, transactionFromParameter, transactionToParameter);
        }
    
        public virtual ObjectResult<sp_frm_get_Transactions_Result> sp_frm_get_Transactions(Nullable<int> transactionID, string barCodeNo, string customerName, string passportNo, string invoiceNo, Nullable<System.DateTime> transactionFrom, Nullable<System.DateTime> transactionTo, Nullable<int> statusCode, Nullable<int> createdBy, Nullable<int> userId, string pageName)
        {
            var transactionIDParameter = transactionID.HasValue ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(int));
    
            var barCodeNoParameter = barCodeNo != null ?
                new ObjectParameter("BarCodeNo", barCodeNo) :
                new ObjectParameter("BarCodeNo", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var passportNoParameter = passportNo != null ?
                new ObjectParameter("PassportNo", passportNo) :
                new ObjectParameter("PassportNo", typeof(string));
    
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var transactionFromParameter = transactionFrom.HasValue ?
                new ObjectParameter("TransactionFrom", transactionFrom) :
                new ObjectParameter("TransactionFrom", typeof(System.DateTime));
    
            var transactionToParameter = transactionTo.HasValue ?
                new ObjectParameter("TransactionTo", transactionTo) :
                new ObjectParameter("TransactionTo", typeof(System.DateTime));
    
            var statusCodeParameter = statusCode.HasValue ?
                new ObjectParameter("StatusCode", statusCode) :
                new ObjectParameter("StatusCode", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_frm_get_Transactions_Result>("sp_frm_get_Transactions", transactionIDParameter, barCodeNoParameter, customerNameParameter, passportNoParameter, invoiceNoParameter, transactionFromParameter, transactionToParameter, statusCodeParameter, createdByParameter, userIdParameter, pageNameParameter);
        }
    
        public virtual ObjectResult<string> sp_frm_Security_get_UserHomePage(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_frm_Security_get_UserHomePage", userIdParameter);
        }
    
        public virtual ObjectResult<sp_frm_Security_get_Users_Result> sp_frm_Security_get_Users(string firstName, string roleName, Nullable<short> isActive, Nullable<int> userId, string pageName)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(short));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_frm_Security_get_Users_Result>("sp_frm_Security_get_Users", firstNameParameter, roleNameParameter, isActiveParameter, userIdParameter, pageNameParameter);
        }
    
        public virtual ObjectResult<sp_frm_Security_TreeViewMenu_Result> sp_frm_Security_TreeViewMenu(Nullable<int> userId, string menu, Nullable<int> parentID)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var menuParameter = menu != null ?
                new ObjectParameter("Menu", menu) :
                new ObjectParameter("Menu", typeof(string));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_frm_Security_TreeViewMenu_Result>("sp_frm_Security_TreeViewMenu", userIdParameter, menuParameter, parentIDParameter);
        }
    
        public virtual int sp_frm_add_upd_ETickets(Nullable<int> eTicketCode, string prefix, string customerName, string refNo, string airlinePNR, Nullable<int> userId, string pageName)
        {
            var eTicketCodeParameter = eTicketCode.HasValue ?
                new ObjectParameter("ETicketCode", eTicketCode) :
                new ObjectParameter("ETicketCode", typeof(int));
    
            var prefixParameter = prefix != null ?
                new ObjectParameter("Prefix", prefix) :
                new ObjectParameter("Prefix", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var refNoParameter = refNo != null ?
                new ObjectParameter("RefNo", refNo) :
                new ObjectParameter("RefNo", typeof(string));
    
            var airlinePNRParameter = airlinePNR != null ?
                new ObjectParameter("AirlinePNR", airlinePNR) :
                new ObjectParameter("AirlinePNR", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_frm_add_upd_ETickets", eTicketCodeParameter, prefixParameter, customerNameParameter, refNoParameter, airlinePNRParameter, userIdParameter, pageNameParameter);
        }
    
        public virtual ObjectResult<sp_frm_get_ETickets_Result> sp_frm_get_ETickets(Nullable<int> eTicketCode, string customerName, string airlinePNR, Nullable<int> userId, string pageName, Nullable<System.DateTime> transactionFrom, Nullable<System.DateTime> transactionTo, string refNo)
        {
            var eTicketCodeParameter = eTicketCode.HasValue ?
                new ObjectParameter("ETicketCode", eTicketCode) :
                new ObjectParameter("ETicketCode", typeof(int));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var airlinePNRParameter = airlinePNR != null ?
                new ObjectParameter("AirlinePNR", airlinePNR) :
                new ObjectParameter("AirlinePNR", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            var transactionFromParameter = transactionFrom.HasValue ?
                new ObjectParameter("TransactionFrom", transactionFrom) :
                new ObjectParameter("TransactionFrom", typeof(System.DateTime));
    
            var transactionToParameter = transactionTo.HasValue ?
                new ObjectParameter("TransactionTo", transactionTo) :
                new ObjectParameter("TransactionTo", typeof(System.DateTime));
    
            var refNoParameter = refNo != null ?
                new ObjectParameter("RefNo", refNo) :
                new ObjectParameter("RefNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_frm_get_ETickets_Result>("sp_frm_get_ETickets", eTicketCodeParameter, customerNameParameter, airlinePNRParameter, userIdParameter, pageNameParameter, transactionFromParameter, transactionToParameter, refNoParameter);
        }
    
        public virtual int sp_frm_add_upd_Flights(Nullable<int> flightCode, string flightName, Nullable<bool> status, Nullable<int> userId, string pageName)
        {
            var flightCodeParameter = flightCode.HasValue ?
                new ObjectParameter("FlightCode", flightCode) :
                new ObjectParameter("FlightCode", typeof(int));
    
            var flightNameParameter = flightName != null ?
                new ObjectParameter("FlightName", flightName) :
                new ObjectParameter("FlightName", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_frm_add_upd_Flights", flightCodeParameter, flightNameParameter, statusParameter, userIdParameter, pageNameParameter);
        }
    
        public virtual ObjectResult<sp_frm_get_Flights_Result> sp_frm_get_Flights(string flightName, Nullable<int> userId, string pageName)
        {
            var flightNameParameter = flightName != null ?
                new ObjectParameter("FlightName", flightName) :
                new ObjectParameter("FlightName", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_frm_get_Flights_Result>("sp_frm_get_Flights", flightNameParameter, userIdParameter, pageNameParameter);
        }
    
        public virtual int sp_frm_add_upd_Tickets(Nullable<long> ticketCode, Nullable<int> vendorCode, Nullable<System.DateTime> ticketDate, Nullable<System.DateTime> dueDate, Nullable<int> userId, string pageName, string refNo, string contactNo)
        {
            var ticketCodeParameter = ticketCode.HasValue ?
                new ObjectParameter("TicketCode", ticketCode) :
                new ObjectParameter("TicketCode", typeof(long));
    
            var vendorCodeParameter = vendorCode.HasValue ?
                new ObjectParameter("VendorCode", vendorCode) :
                new ObjectParameter("VendorCode", typeof(int));
    
            var ticketDateParameter = ticketDate.HasValue ?
                new ObjectParameter("TicketDate", ticketDate) :
                new ObjectParameter("TicketDate", typeof(System.DateTime));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            var refNoParameter = refNo != null ?
                new ObjectParameter("RefNo", refNo) :
                new ObjectParameter("RefNo", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_frm_add_upd_Tickets", ticketCodeParameter, vendorCodeParameter, ticketDateParameter, dueDateParameter, userIdParameter, pageNameParameter, refNoParameter, contactNoParameter);
        }
    
        public virtual ObjectResult<sp_frm_get_Tickets_Result1> sp_frm_get_Tickets(Nullable<long> ticketCode, string vendorName, Nullable<int> userId, string pageName, Nullable<System.DateTime> transactionFrom, Nullable<System.DateTime> transactionTo, string refNo)
        {
            var ticketCodeParameter = ticketCode.HasValue ?
                new ObjectParameter("TicketCode", ticketCode) :
                new ObjectParameter("TicketCode", typeof(long));
    
            var vendorNameParameter = vendorName != null ?
                new ObjectParameter("VendorName", vendorName) :
                new ObjectParameter("VendorName", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            var transactionFromParameter = transactionFrom.HasValue ?
                new ObjectParameter("TransactionFrom", transactionFrom) :
                new ObjectParameter("TransactionFrom", typeof(System.DateTime));
    
            var transactionToParameter = transactionTo.HasValue ?
                new ObjectParameter("TransactionTo", transactionTo) :
                new ObjectParameter("TransactionTo", typeof(System.DateTime));
    
            var refNoParameter = refNo != null ?
                new ObjectParameter("RefNo", refNo) :
                new ObjectParameter("RefNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_frm_get_Tickets_Result1>("sp_frm_get_Tickets", ticketCodeParameter, vendorNameParameter, userIdParameter, pageNameParameter, transactionFromParameter, transactionToParameter, refNoParameter);
        }
    }
}
